#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void railFence(char *message, char *cipherText, int length, int A); //This is the standard rail-fence cipher function prototype.

void railFence2(char *message, char *cipherText, int length, int A, int B, int dir);  // This is the 2-level rail-fence cipher function prototype.


int main()
{
    int r= 0, c= 0, y = 0, i = 0, rails1= 0, length1= 0, dir=0, A=0, B=0;

    FILE *input;
    input = fopen("message.txt", "r");

    if(input == NULL)
    {
        perror("fopen()");
        return 1;
    }
    char x;
    char str[1000];
    fscanf(input, "%c", &x);
    while(!feof(input) && i < 999) //Determines whether or not the program has scanned through the entire file using the !feof function.
    {
        str[i++] = x;
        fscanf(input, "%c", &x);
    }
    str[i] = 0;
    char cipherText[1000];

    printf("Cipher Selection: Choose from the following options\n");
    printf("1. Encryption of a message using the classical rail-fence cipher algorithm\n");
    printf("2. Encryption/Decryption of a message using the 2-level rail-fence cipher\n");
    scanf("%d", &y);
    switch (y)
    {
    case 1:
        printf("\nEnter message to be encrypted:\n\n");
        printf("%s\n", str);
        char *string = &str[0];
        printf("Enter key:\n\n");
        scanf("%d", &rails1);
        length1 = strlen(str);
        printf("\nEncrypted message is:\n\n");
        railFence(string, &cipherText, length1, rails1);
        break;

    case 2:
        printf("\nEnter message to be encrypted:\n\n");
        printf("%s\n", str);
        printf("Enter A value and B value\n");
        scanf("%d %d", &A, &B);
        printf("If you want to Encrypt please enter 1\nIf you want to Decrypt please enter 2\n");
        scanf("%d", &dir);
        length1 = strlen(str);
        printf("\nEncrypted message is:\n\n");
        railFence2(&str, &cipherText, length1, A, B, dir);
        break;
    }
}
void railFence(char *message, char *cipherText, int length, int A)
{
    int r, c;
    char encryptedMessage[100][1000];
    for(r = 0; r < A; r++)
    {
        for(c = 0; c < length; c++)
        {
            encryptedMessage[r][c] = 0;
        }
    }
    c = 0;
    while (c < length)
    {
        for(r = 0; r < A; ++r)
        {
            encryptedMessage[r][c] = (int)message[c];
            c++;
        }
        for(r = A - 2; r > 0; --r)
        {
            encryptedMessage[r][c] = (int)message[c];
            c++;
        }
    }
    for(r = 0; r < A; r++)
    {
        for(c = 0; c < length; c++)
        {
            if (encryptedMessage[r][c] != '\n')
                printf("%c", encryptedMessage[r][c]);
        }
    }
}

void railFence2(char *message, char *cipherText, int length, int A, int B, int dir)
{
    while(dir == 1)
    {
        int v, h;
        char encryptedMessage2[100][1000];
        for(v = 0; v < A; v++)
        {
            for(h = 0; h < length; h++)
            {
                encryptedMessage2[v][h] = 0;
            }
        }
        h = 0;
        while(h < length)
        {
            for(v = 0; v < A; ++v)
            {
                encryptedMessage2[v][h] = (int)message[h];
                h++;
            }
            for(v = A - 2; v == B-1; --v)
            {
                encryptedMessage2[v][h] = (int)message[h];
                h++;
            }
            for(v = B; v < A; ++v)
            {
                encryptedMessage2[v][h] = (int)message[h];
                h++;
            }
            for(v = A - 2; v > 0; --v)
            {
                encryptedMessage2[v][h] = (int)message[h];
                h++;
            }
        }
        for(v = 0; v < A; v++)
        {
            for(h = 0; h < length; h++)
            {
                if (encryptedMessage2[v][h] != '\n')
                    printf("%c", encryptedMessage2[v][h]);
            }
        }
        return 0;
    }
}
